## Theme Generation Rules (Default-derived themes)

Purpose: Enable AI to generate a new theme based on the `default/` theme without breaking CMS integration. The generated theme must be self-contained, discoverable by the CMS, and immediately usable upon activation. Visual layout, composition, and structure of UI blocks are free to diverge significantly from the default to achieve a distinct design.

### Golden rules
- Preserve the folder structure and required files.
- Keep the CMS integration contract identical: component metadata shape, registry API, Tailwind token mapping, and theme JS hooks.
- You may add new UI components and page templates, but you must register components so they are available to the CMS at activation.
- Layout and composition freedom: You may rearrange sections, change grid systems, spacing, and typography scale, add/remove sub-sections, and otherwise alter component internals to create a clearly different look and structure from the default.
- Component freedom: You may create entirely new blocks, replace or remove default blocks, and introduce new categories as needed. Ensure all shipped blocks are correctly registered.
- Dark mode is optional. Default to a high-quality light mode. Only include dark mode tokens and styles if explicitly requested.

### Canonical structure for each theme
The new theme must mirror this directory layout under `components/themes/<themeSlug>/` in the main app (this repo shows contents under a theme directory). This requirement applies to files and folders only; internal UI layouts and compositions are free to change:

- `ui/` — React blocks. Each file is a block (e.g., `Hero.tsx`, `Header.tsx`).
- `page-templates/` — Optional full-page templates and README.
- `register-blocks.tsx` — Central registry and theme metadata.
- `tailwind.config.ts` — Theme-scoped Tailwind config.
- `styles.css` — CSS variables and JS-paired styles.
- `main.js` — Browser JS behaviors (smooth scroll, mobile menu, animations, forms).
- `README.md` — Theme overview and workflow.

### Theme naming and prefixing
- Define a human `themeName` (e.g., "Ocean").
- Define a kebab-case slug `themeSlug` (e.g., `ocean`).
- Define a CSS variable prefix `--<themeSlug>-*` (e.g., `--ocean-primary`).
- For compatibility, either:
  - Keep the JS namespace `window.DefaultTheme`, or
  - Provide both `window.DefaultTheme` and `window[PascalCase(themeSlug)]` pointing to the same object.

### File requirements

#### 1) register-blocks.tsx (mandatory)
- Must export theme metadata:
  - `export const themeName = '<Human Name>'`
  - `export const themeDescription = '<Short description>'`
  - `export const themeAuthor = '<Author or generator>'`
  - `export const themeVersion = '<semver>'`
- Must import every component default export and its `metadata` from `./ui/*`.
- Must define and export:
  - `componentRegistry` — object mapping `type` to component.
  - `componentInfo: ComponentInfo[]` — array of all imported metadata objects.
  - Helper APIs (unchanged): `getComponent`, `renderComponent`, `getComponentInfo`, `getAllComponents`, `getComponentsByCategory`.
- Keep the `process.env.NODE_ENV === 'development'` debug logs allowed.
- Do not change the import path for `ComponentInfo` (must be `@/lib/cms-types`).

Component auto-registration rule: Whenever a new file is added in `ui/`, it must be imported in `register-blocks.tsx`, added to `componentRegistry`, and its `metadata` added to `componentInfo`.

#### 2) ui/* (mandatory per component)
- Each block file must:
  - Export a default React component.
  - Export `metadata: ComponentInfo` with fields: `type` (unique string key), `name`, `description`, `category`, `icon`.
  - Use allowed CMS imports only (e.g., `@/lib/cms-types`, `@/lib/cms-data`, `@/hooks/use-navigation`, `@/components/ui/*`).
  - Place `"use client"` at top if the component uses hooks or browser APIs.
  - File name should be PascalCase and typically match `metadata.type`.
- Valid `category` examples: `layout`, `content-blocks`, `navigation`, `media`, `forms`, `commerce`, `utilities`.
- Keep alias imports using `@/` (do not rewrite to relative paths).

Minimal component scaffold:
```tsx
// ui/MyBlock.tsx
'use client'
import { ComponentInfo } from '@/lib/cms-types'

export const metadata: ComponentInfo = {
  type: 'MyBlock',
  name: 'My Block',
  description: 'Short description',
  category: 'content-blocks',
  icon: 'Star',
}

export default function MyBlock(props: Record<string, any>) {
  return <section data-animate className="container py-12">Hello</section>
}
```

#### 3) tailwind.config.ts (mandatory)
- Keep structure similar to default theme:
  - `darkMode` is optional. If not providing dark mode, you may omit the `darkMode` setting or keep `darkMode: ['class']` without defining `.dark` tokens.
  - `content` globs must include all `ts/tsx` files in this theme, e.g. `./components/themes/<themeSlug>/**/*.{ts,tsx}`.
  - Map Tailwind tokens to CSS variables using the theme prefix: `hsl(var(--<themeSlug>-primary))` etc.
  - Preserve `tailwindcss-animate` plugin.
- You may extend fonts, radii, keyframes, and animations.

#### 4) styles.css (mandatory)
- Under `@layer base`, define light tokens using the theme prefix `--<themeSlug>-*` for all keys mirroring the default set. Dark tokens are optional and should only be added if dark mode is explicitly requested:
  - `--<themeSlug>-background`, `--<themeSlug>-foreground`, `--<themeSlug>-card`, `--<themeSlug>-card-foreground`, `--<themeSlug>-popover`, `--<themeSlug>-popover-foreground`, `--<themeSlug>-primary`, `--<themeSlug>-primary-foreground`, `--<themeSlug>-secondary`, `--<themeSlug>-secondary-foreground`, `--<themeSlug>-muted`, `--<themeSlug>-muted-foreground`, `--<themeSlug>-accent`, `--<themeSlug>-accent-foreground`, `--<themeSlug>-destructive`, `--<themeSlug>-destructive-foreground`, `--<themeSlug>-border`, `--<themeSlug>-input`, `--<themeSlug>-ring`, `--<themeSlug>-radius`.
- Provide theme-prefixed utility classes analogous to default (e.g., `.ocean-hero-gradient`, `.ocean-card-hover`, `.ocean-text-gradient`, `.ocean-button-primary`).
- Preserve JS-paired selectors and behaviors (names must remain exactly):
  - `[data-mobile-menu]`, `[data-mobile-menu].open`, `body.menu-open`
  - `[data-animate]`, `[data-animate].animate-in`
  - `.form-field`, `.form-field input.error`, `.form-field input.has-value + label` etc.
  - `html { scroll-behavior: smooth; }`

#### 5) main.js (mandatory)
- Must expose a global theme object with the same API surface:
  - `name`, `version`, `init()`, `cleanup()`, and `utils` (`debounce`, `isInViewport`, `triggerEvent`).
- Namespace requirement for compatibility: assign to `window.DefaultTheme`. You may also assign to `window[PascalCase(themeSlug)]` as an alias.
- Behaviors to initialize in `init()`:
  - Smooth scrolling for `a[href^="#"]`.
  - Mobile menu toggling using `[data-mobile-menu-button]`, `[data-mobile-menu]`, `[data-mobile-menu-overlay]` and `body.menu-open`.
  - IntersectionObserver scroll animations for `[data-animate]` adding `animate-in`.
  - Form enhancements: floating labels via `.has-value`, required-field validation toggling `.error`.
- Implement `cleanup()` that removes event listeners and observers.
- Keep the DOM-ready auto-init logic.
- Keep CommonJS export guard for module systems if present.

#### 6) page-templates/* (optional)
- May add full-page templates with default exports.
- Templates may use `DNDArea` to mark dynamic content injection regions.
- If you introduce a template registry later, avoid breaking or renaming the component registry.

#### 7) README.md (recommended)
- Explain theme concept, token choices, and how to build/use it with `npm run build:themes`.
- List the blocks shipped and any templates.

### CMS integration contract (must-not-break)
- The CMS discovers blocks solely via `register-blocks.tsx`.
- `ComponentInfo` type and import path (`@/lib/cms-types`) must be preserved.
- Each block’s `metadata.type` must be unique and match the registry key.
- Do not alter `getComponent`, `renderComponent`, or the metadata array shape.
- Keep alias imports (`@/...`) intact; do not rewrite to relative paths.

### Allowed libraries and patterns
- Next.js primitives (`next/link`, `next/image`).
- UI primitives from `@/components/ui/*` (e.g., `button`, `card`).
- Icons from `lucide-react` (or compatible set used in the default theme).
- Client components must declare `'use client'`.

### Do / Don’t
- Do: add new components in `ui/` with correct `metadata` and registry updates.
- Do: adjust Tailwind tokens to your theme’s identity by changing CSS variable values and mapping.
- Do: change layouts, grids, spacing, and component compositions to make the theme visually distinct.
- Do: create brand-new blocks and remove or replace default ones if they’re not needed, as long as the registry reflects what ships.
- Do: extend `main.js` with more behaviors if needed, but keep the existing hooks/selectors.
- Don’t: remove existing helper APIs or change their signatures.
- Don’t: change data-attribute hooks or classnames relied upon by JS.
- Don’t: change CMS import paths, types, or alias configuration.
- Don’t: implement dark mode unless it is explicitly requested for the theme.

### QA checklist (must pass before delivering theme)
- Structure:
  - All required files present; `ui/` contains at least one block.
  - `register-blocks.tsx` imports every block and exports `componentRegistry` and `componentInfo` correctly.
- Types/Build:
  - Type-check passes where applicable; no missing imports.
  - Tailwind `content` globs include all theme files.
- Runtime:
  - `main.js` auto-inits and mobile menu toggles open/close via data attributes.
  - `[data-animate]` elements animate on scroll.
  - Form fields gain `.has-value` and `.error` as expected.
- Styling:
  - Light tokens apply; Tailwind colors resolve to theme variables. Dark mode (tokens/selectors) is optional and should only be present if requested.
  - Theme-prefixed helper classes work (e.g., hero/text gradients, card hover).
  - The theme exhibits meaningful visual and structural differentiation from the default (e.g., altered layouts, grids, spacing, and compositions).

### Example: adapting tokens and config for a new theme
- Choose `themeName = 'Ocean'`, `themeSlug = 'ocean'`.
- In `styles.css`, define `--ocean-*` variables under `:root`. Add `.dark` only if dark mode is requested.
- In `tailwind.config.ts`, map colors to `hsl(var(--ocean-...))`.
- Keep JS hooks and selectors unchanged; `main.js` still assigns to `window.DefaultTheme` (and optionally `window.Ocean`).

### Delivery contract
- Provide the complete theme folder with all files above.
- Ensure components are pre-registered in `register-blocks.tsx` so activating the theme in the CMS immediately exposes all blocks.


